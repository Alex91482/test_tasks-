ТЗ
Основные цели: 
На основе имеющегося массива данных, создать таблицу шириной 50% от экрана;
Колонки в таблице: 
Имя (firstName), 
Фамилия (lastName), 
Описание (about),
Цвет глаз (eyeColor).
Данные колонки “about” должны отображаться в две строки, остальное обрезаем многоточием (...);
Каждая колонка должна иметь свойство сортировки;
При клике на строку в соседнем с таблицей DIV’е отобразить форму редактирования данных выбранной строки.

Дополнительные цели:
Добавить постраничный вывод данных из предоставленного JSON (10 строк на страницу);
Добавить возможность показа/скрытия колонок;
В колонке “eyeColor” предоставлять данные в виде цвета, сохраняя возможность сортировки по значению.

Использование jQuery, Bootstrap и других фреймворков и библиотек не разрешено. Комментирование кода с пояснениями — обязательно.
Решение задачи разместить на https://github.com/


Для просмотра выполненной работы запустите new_h1.html
Скрипт new_1.js получает данные которыми будет заполнена таблица с предоставленного jsonTest.json файла который находится в папке json.
При запуске на локальном сервере раскомментируйте в new_h1.html функцию jsonRead3(). Далее в скрипте new_1.js найдите функцию jsonRead3(),
в функции найдите переменную "var requestURL ='http://localhost:8081/my_project_js/json/jsonTest.json';" и измените строку заключенную 
в одинарные кавычки (содержащую адрес локального веб сервера и путь к файлу json) написав туда адрес своего локального веб сервера и путь 
до файла jsonTest.json.
Так же в new_1.js добавленна функция jsonRead4()  если нет желания возится с локальным сервером просто используйте ее (не чего раскомментировать
не нужно, просто запускаете new_h1.html).

Скрипт выполняет создание таблицы (html тегов таблицы, пожее таблица создается в элементе id = 'content') таблица заполняется данными 
из файла json. Происходит минимальная визуальня обработка. Таблица корректируется под 50% экрана, создается рамка, текст не помещающийся
в две строки обрезается и дополняется многоточием. При нажатии на любую строку текст находящийся справа от таблицы изменится отражая 
текущее состояние сортировки. Что бы отсортировать текст нажмите на любой из заголовков в таблице firstName, lastName, about, eyeColor.
Сортировка происходит по одному столбцу. Столбцы firstName, lastName, eyeColor сортируются по алфавиту (A-Z) функцией sortTable().
При повторном нажатии на тот же заголовок, по которому проводилась сортировка, порядок будет изменен на противоположный (Z-A).
Сортировка колонки about производится только по возрастанию количества символов (полного количества символов из файла json) в описании (Min-Max), функцией sortAbout().

 В скрипте существуют две глобальные переменные (с ограниченной областью видимости) sortingState и sortColumn они будут использоватся в 
функции sortTable, sortAbout в которых им будет присвоеннои значение в зависимости от того по какой колонке происходила сортировка (sortColumn)
и былв ли это сортировка по возрастанию или убыванию (sortingState).
 Функция jsonRead4()
 - Используется для "локального чтения" файла json. Полученный массив передается функции getTableTwo() которая будет формировать таблицу.
Полученная таблица будет размещена на html странице в элементе id = 'content'.
 Функция jsonRead3() 
 - Используется для получения файла json с сервера. Создается запрос XMLHttpRequest() к requestURL, ответ будет получен асинхронно. Ответ 
будет передан функции getTableTwo() которая будет формировать таблицу.Полученная таблица будет размещена на html странице в элементе id = 'content'.
 Фунуция getTableTwo() 
 - Начинается с создания тега <table id = "tabl"> после которого будут созданы <thead> и <tbody>. В заголовках столбцов создаем ссылки на вызовы
функций сортировки по нажатию (onclick). Используются функции sortTable() и sortAbout(), подробнее о них будет рассказанно далее. Циклом переносим данные из
массива (прочитанного json) в таблицу. Закрываем табличные теги. Далее создаем строку, в которй при нажатии на любую строку из таблицы, будет отображатся 
информация о сортировке. 
 Функция tableStyle() 
 - Создает стиль таблицы и ячеек из колонки about. Так же добовляет отступ для строки которая отображает состояние сортировки при нажатии на любую строку 
в таблице.
 Функция sortTable() 
 - Сортирует таблицу по одному из столбцов таблицы: firstName, lastName, eyeColor. Сортировка производится в двух вариантах по алфавиту и наоброт.
Например для сортировки по алфавиту колонки firstName кликните однократно по заголовку данного столбца. Для уточнения состояния сортировки кликните
по любой строчке таблицы. Справа от тоблицы строка отоброзит состояние сортировки. Что бы отсортировать в обратном порядке нажмите на заголовок firstName
еще раз. Для "запоминания" состояния в данной функции используется переменная dir, которая находится в одном из состояний asc или desc. В данной функции 
используется алгоритм сортировки пузырьком. После окончания сортировки глобальным переменным присваиваются значения. Для переменной sortingState таких
значения всего два "10" - обозначает что сортировка выполнена по возрастанию и "20" - обозначает что сортировка выполнена по убыванию. Переменной sortColumn
может быть присвоенно четыре значения 0, 1, 2, 3 что обозначает номер столбца "0" - firstName, "1" - lastName, "2" - about, "3" - eyeColor.
 Функция sortAbout()
 - Предназначенна для сортировки колонки about только по возрастанию (имеется ввиду количество символов в полном тексте заполняющем ячейку). Сортировка производится
алгоритмом "Сортировка выбором". Чтобы сортировка была менее загруженна элементами, алгоритм сортировки применяется к массиву чисел, который состоит из 
посчитанной длинны строки из каждой ячейки about. Порядок чисел в массиве (длинны строки) соответствует порядку строк в таблице.Добовляем в начало массива 0,
этот элемент нужен для уравнивания количества записей из столбца и массива, при дальнейшей сортировки первый элемент не учитывается т.к. это заголовок. 
В цикле заполняем массив длинной посчитанных строк. Далее производим к массиву сортировку выбором. Сортировка выбором производится в двух циклах, опуская 
подробности алгоритма "сортировки выбором", интерес представляют две переменные в конце каждой итерации первого цикла: min - минимальное число из "оставшихся"
позиций в масиве и i - текущее положение в массиве будущего минимального элемента. С помощью двух этих позиций сортируем ячейки таблицы. Для этого понадобится
создание клонов этих ячеек что бы не произошло потери ячейки при перезаписи. По окончании сортироки перезаписываем глобальные переменные.
 Функция defStr()
 - Предназначенна для отображения состояния сортировки при нажатии на любую строку. В функии используется переменная swSc которая получается при сложении двух
глобальных переменных. Складывается sortColumn и sortingState, при сложении может получится 9 вариантов сортировки. Для каждого из таких вариантов существует
свое сообщение. Например производилась сортировка по алфавиту колонки eyeColor это значит что sortColumn = 3 и sortingState = 10 что в сумме дает 13. Для цифры
13 в списке существует сообщение "Sort column eyeColor from A to Z" которое будет выведенно на html странице в элементе <div> id = layer1.


